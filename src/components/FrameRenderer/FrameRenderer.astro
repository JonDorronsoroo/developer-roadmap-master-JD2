---
import Loader from '../Loader.astro';
import './FrameRenderer.css';

export const prerender = false
export interface Props {
  resourceType: 'roadmap' | 'organigrama';
  resourceId: string;
  dimensions?: {
    width: number;
    height: number;
  };
  componentesCategoriaPrimerNivel: string[];
  componentesCategoriaSegundoNivel: [string,string][];
  componentesCategoriaTercerNivel: [string,string][];
}


const { resourceId, resourceType,  dimensions = null, componentesCategoriaPrimerNivel, componentesCategoriaSegundoNivel,componentesCategoriaTercerNivel} = Astro.props;

---

<div
  id='resource-svg-wrap'
  style={dimensions
    ? `--aspect-ratio:${dimensions.width}/${dimensions.height}`
    : null}
  data-resource-type={resourceType}
  data-resource-id={resourceId}
  data-componentes-categoria-primer-nivel={componentesCategoriaPrimerNivel}
  data-componentes-categoria-segundo-nivel={componentesCategoriaSegundoNivel}
  data-componentes-categoria-tercer-nivel={componentesCategoriaTercerNivel}
>

<label id="contador" transition:persist></label>
  <div id='resource-loader'>
    <Loader />
  </div>
</div>

<script  src='./renderer.ts'></script>
<script>
  // Variable para contar las veces que se ejecuta el evento astro:page-load
  let loadEventCount = 0;

  document.addEventListener('astro:after-swap', () => {
    // Incrementar el contador cada vez que se ejecuta el evento astro:page-load
    loadEventCount++;

    // Verificar si es la primera vez que se ejecuta el evento astro:page-load
    if (loadEventCount === 1) {
      // Refrescar la página después de un breve retardo (por ejemplo, 5 segundos)
      setTimeout(() => {
        location.reload();
      }, 2000); // Ajusta el tiempo de espera según sea necesario
    }
  }, { once: true });
</script>