---
import SimplePageHeader from "../../components/SimplePageHeader.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { type ICategoria } from "../../database/dbMySQL";
import { getAllCategorias } from "../../database/consultas";
import '../../styles/formulario.css';

const user = Astro.locals.user;
if(!user){
    return Astro.redirect("/auth/signin")
}else if(user && (!user.admin || user.admin==0)){
    return Astro.redirect("/home")
    
}

const categorias = await getAllCategorias();
const categoriasNames = categorias?.map((categoria: ICategoria) => categoria.idNombre);

---

<BaseLayout title='Onboarding' permalink={'/enviarOpinion'}>
    <SimplePageHeader
        title='Developer Roadmaps'
        description='Incluir en el almacenamiento de la empresa un nueva categoría:'
    />

    <form id="categoriaForm" class="form-container">
        <fieldset>
            <label for="titulo">Título:</label>
            <input
                type="text"
                id="titulo"
                name="titulo"
                required
                placeholder="Título de la categoría"
                aria-required="true"
            />

            <label for="descripcion">Descripción:</label>
            <textarea
                id="descripcion"
                name="descripcion"
                cols="50"
                rows="5"
                placeholder="Descripción..."
                required
                aria-required="true"
            ></textarea>

            <input type="hidden" id="categoriaPadre" name="categoriaPadre" value="Global">


            <label for="categoriaPadre">Pertenece a alguna categoría más global:</label>
            
            <input type="text" id="input-box" placeholder="Buscar categoría" autocomplete="off">

            <div id="custom-dropdown" class="custom-dropdown">
                <ul id="dropdown-options" class="dropdown-options">
                    <li value="Global">Ninguna</li>
                    {categoriasNames?.map((categoria: string) => (
                        <li value={categoria}>{categoria}</li>
                    ))}
                </ul>
            </div>

        </fieldset>


        <div class="button-container">
            <button type="submit">Guardar</button>
        </div>

        <div id="correct-message" class="message success"></div>
        <div id="error-message" class="message error"></div>
    </form>

    <script>
      const form = document.getElementById('categoriaForm');
      const correctMessageElement = document.getElementById('correct-message');
      const errorMessageElement = document.getElementById('error-message');
 

      form?.addEventListener('submit', async function(event) {
          event.preventDefault();
          const form = event.target as HTMLFormElement;
          const formData = new FormData(form);
  
          const response = await fetch('/api/addCategoria', {
              method: 'POST',
              body: formData
          });
  
          const result = await response.json();
  
          if (response.ok) {
              if (correctMessageElement && errorMessageElement) {
                  correctMessageElement.textContent = result.message;
                  errorMessageElement.textContent = ''; // Clear error message if success
                  correctMessageElement.classList.add('show'); // Show success message style
                  errorMessageElement.classList.remove('show'); // Hide error message style
              }
          } else {
              if (errorMessageElement && correctMessageElement) {
                  errorMessageElement.textContent = result.message || 'Error';
                  correctMessageElement.textContent = ''; // Clear success message if error
                  errorMessageElement.classList.add('show'); // Show error message style
                  correctMessageElement.classList.remove('show'); // Hide success message style
              }
          }
      });

    const inputBox = document.getElementById('input-box');
    const dropdown = document.getElementById('custom-dropdown');
    const dropdownOptions = document.getElementById('dropdown-options');

    // Hide the original select element
    const selectBox = document.getElementById('categoriaPadre');
    if(selectBox){
    selectBox.style.display = 'none';
    }

    // Show dropdown when input is clicked
inputBox?.addEventListener('click', function(event) {
    if (dropdown) {
        dropdown.style.display = 'block';
        updateOptionsVisibility();
    }
});

// Add an input event listener to the input box
inputBox?.addEventListener('input', function(event) {
    updateOptionsVisibility();
});

// Function to update options visibility based on input text
function updateOptionsVisibility() {
    const inputElement = document.getElementById('input-box') as HTMLInputElement
    const searchText = inputElement.value.toLowerCase(); // Obtain the current value of the input box and convert it to lowercase
    
    // Loop through each option in the dropdown
    const dropdownOptions = document.querySelectorAll('#dropdown-options li');
    dropdownOptions.forEach(option => {
        const optionText = option.textContent?.toLowerCase();
        if (searchText === '' || optionText && optionText.includes(searchText)) {
            (option as HTMLLIElement).style.display = ''; // Show the option if it matches the search text or if the input is empty
        } else {
            (option as HTMLLIElement).style.display = 'none'; // Hide the option if it does not match the search text
        }
    });

    // If the input text is empty, display all options
    if (searchText === '') {
        dropdownOptions.forEach(option => {
            (option as HTMLLIElement).style.display = '';
        });
    }
}

    // Hide dropdown when user clicks outside of it
    document.addEventListener('click', function(event) {
        
        const target = event.target as Node;
        if (dropdown && !dropdown.contains(target) && target !== inputBox) {
            dropdown.style.display = 'none';
        }
    });

    dropdownOptions?.addEventListener('click', function(event) {
    const selectedOption = event.target as HTMLLIElement;
    if (selectedOption.tagName === 'LI') {
        const value = selectedOption.getAttribute('value');
        if (value && inputBox && dropdown) {
            const inputElement = document.getElementById('input-box') as HTMLInputElement;
            const hiddenInput = document.getElementById('categoriaPadre') as HTMLInputElement;
            inputElement.value = value;
            dropdown.style.display = 'none';
            hiddenInput.value = value;
        }
    }
});

  
  </script>

  <style>
    .custom-dropdown {
        position: relative;
        display: none;
    }

    .dropdown-options {
        list-style: none;
        padding: 0;
        margin: 0;
        max-height: 300px; /* Set a maximum height for the dropdown */
        overflow-y: auto; /* Enable vertical scrolling */
        position: absolute;
        background-color: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        width: 100%; /* Make the dropdown the same width as the input */
    }

    .dropdown-options li {
        padding: 8px 12px;
        cursor: pointer;
    }

    .dropdown-options li:hover {
        background-color: #f0f0f0;
    }

    /* Style the scrollbar */
    .dropdown-options::-webkit-scrollbar {
        width: 8px;
    }

    .dropdown-options::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .dropdown-options::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    .dropdown-options::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

  </style>
</BaseLayout>
